name: "[S3 Staging] 'Dynamic cal importer'"
on:
  workflow_dispatch:
  push:
    branches:
      - feat/LIVE-2174-dynamic-cal

concurrency:
  group: bot-dyn-cal

jobs:
  start-runner:
    name: "start ec2 instance (Linux)"
    if: ${{ always() }}
    uses: ledgerhq/actions/.github/workflows/start-linux-runner.yml@main
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}

  stop-runner:
    name: "stop ec2 instance (Linux)"
    needs: [start-runner, run-bot]
    uses: ledgerhq/actions/.github/workflows/stop-linux-runner.yml@main
    if: ${{ always() }}
    with:
      label: ${{ needs.start-runner.outputs.label }}
      ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}
    secrets:
      CI_BOT_TOKEN: ${{ secrets.CI_BOT_TOKEN }}


  run-bot:
    runs-on: ${{ needs.start-runner.outputs.label }}
    needs: [start-runner]
    steps:
      - name: prepare runner
        run: |
          sudo growpart /dev/nvme0n1 1
          sudo resize2fs /dev/nvme0n1p1
      - uses: actions/checkout@v3
      - name: Retrieving crypto-assets
        uses: actions/checkout@v3
        with:
          submodules: true
          repository: LedgerHQ/crypto-assets
          token: ${{ secrets.CI_BOT_TOKEN }}
          path: crypto-assets
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: latest
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: pnpm
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: install and build
        continue-on-error: true
        run: |
          pnpm i --filter="live-cli..." --filter="ledger-live" --filter="ledger-libs" --frozen-lockfile
          pnpm build:ljs
        shell: bash
      - name: run script
        run: |
          mkdir cal
          node libs/ledgerjs/script/crypto-assets-importer/index.js $PWD/crypto-assets true
          mv libs/ledgerjs/packages/cryptoassets/data/**.json cal
      - name: Configure AWS Credentials (staging)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.LEDGER_LIVE_ASSETS_SA_KEY_ID_STG }}
          aws-secret-access-key: ${{ secrets.LEDGER_LIVE_ASSETS_SA_ACCESS_KEY_STG }}
          aws-region: eu-west-1
      - name: Deploy json to s3
        run: aws s3 sync ./cal/ s3://ledger-live-cryptoassets-stg --delete